step 1: Create Maven Project 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        Create Maven project in Eclipse
	File--> Other--> Maven project.(or)
	Right Click ---- New ---- Project -- Maven ---- Maven project ---- 
	create simple project --- Project id name (two times) --- finish
	
step 2: Update POM.xml file required dependencies and plugins
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
step 3: Install plugins and dependencies for Maven Project 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Click on Project folder ----- Maven ---update project --- force update ---- OK

step 4: Add TestNG  for Maven Project 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
35. Introduction to TestNG & Annotations in TestNG(pavan)
Eclipse inside ----- help ---- eclipse market place ---- serach(TestNG for eclipse)--- install
Right click ----- properties -------Java build path ---- add Library ----- TestNG --- next ---Finish


step 5: Create All Files and Folders
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/java --packages
              pageObjects ----  Basepage.java , HomePage.java ,AccountRegistrationPage
              testBase--------- BaseClass.java(----Main file)
              testCases ------  TC_001_AccountRegistrationTest.java
              utilities
src/test/resources -- packages
                      log4j2.xml   (<Property name="basePath">./logs</Property>) 
                      testData---------
                      screenshots
                      reports
                      Runner
      
 step 6: Create PageObjects(3)--- constructor(mutiple times) ---  Setup single Browser(1) ----  Create the first test cases(1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pageobjects --- Basepage.java , HomePage.java ,AccountRegistrationPage
  
pageObjects ----- BasePage.java
pageObjects ----- HomePage.java
pageObjects ----- AccountRegistrationPage.java

testBase package  ----- BaseClass.java(Setup browser only single browser )
testcases package  ----- BaseClass.java( Create the First test case)

Go to TC_001_AccountRegistrationTest.java ---- Run as ---Test NG Test --- you will see output(Direct execute fie)

step 7 : Adding the log file or log4j2 API or libray
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log4j-core add dependencies 
log4j-api  add dependencies 
 
src/test/resources ---- logs folder --- create file log4j2.xml file---Logger
 
src/test/java ----- testBase package ---- BaseClass.java-----Logger

public Logger logger; // for logging
logger=LogManager.getLogger(this.getClass());  //logging

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

src/test/java ----testCases ---- TC_001_AccountRegistrationTest.java


Go to TC_001_AccountRegistrationTest.java ---- Run as ---Test NG Test --- you will see output(Direct execute fie)


step 8 : Chrome options if you need use otherwise leave it.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ChromeOptions options=new ChromeOptions();
options.setExperimentalOption("excludeSwitches",new String[] {"enable-automation"});
WebDriverManager.chromedriver().setup();
driver=new ChromeDriver(options);
				
testBase package ---- BaseClass.java
---------------------------------------------------		

step 9 :Create testng.xml file to Run Test Cases and parameterize browser name to BaseClass →setup() method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Select the testcases package--inside file ----- TestNG ---- convert to TestNG ---- Finish

parameterize browser name to BaseClass →setup() method and testng.xml file using parameters

 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
  
  <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
  
    <classes>
      <class name="testCases.TC_001_AccountRegistrationTest"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->



 parameterize recived to BaseClass inside setup() method


 @Parameters("browser")   // getting browser parameter from testng.xml
 
 //launch right browser based on parameter
		if (browse.equals("chrome")) 
		   {
			driver = new ChromeDriver();
		   } 
		else if (browse.equals("edge"))
		   {
			driver = new EdgeDriver();
		   } 
		else 
		   {
			driver = new ChromeDriver();
		   }
	
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.get("https://tutorialsninja.com/demo/");
		driver.manage().window().maximize();
		
		
testBase package ---- BaseClass.java

Run and Check to working to chrome,edge browsers using to testng.xml file 

Maintain separate xml to run tests multiple browsers parallelly

But not working ---parallel execute.



step 10 :Add config.properties + ResourceBundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1.Add config.properties file under src/test/resoures.

appURL=https://tutorialsninja.com/demo/
email=pradeepkumar@gmail.com
password=pradeep@123


2.Update BaseClass →setup() method, add script to load config.properties file.

import java.util.ResourceBundle;

public ResourceBundle rb;// to read config.properties
rb = ResourceBundle.getBundle("config");// Load config.properties
driver.get(rb.getString("appURL")); // get url from config.properties file

testBase package ----- BaseClass.java

3.Replace hard coded values in Test Cases like url, username, password etc...



step 11 :Extent Report file adding to ----Utilities Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create ExtentReportUtility utility class under utilities package.

ExtentReportManager.java

testBase package ---- BaseClass

Add two reports,screenshots
 <listeners>
		<listener class-name="utilities.ExtentReportManager" />
</listeners>	



testng.xml add listeners

Add captureScreen() method in BaseClass
Add ExtentReportUtility (Listener class) entry in testng.xml file.
Make sure WebDriver is static in BaseClass, we refer same driver instance in ExtentReportUtility.


failure initally using for TC_001_AccountRegistrationTest.java

//regpage.setEmail(randomeString()+"@gmail.com");// randomly generated the email

See reports and screenshots folder --- refresh and see

step 12: Login Test using pre-requirement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/test/resources ----- config.properties

email=pradeepkumar@gmail.com
password=pradeep@123


1.Create and update page object classes.

HomePage – update by adding login link element

LoginPage, MyAccountPage – new classes

PageObjects ---- LoginPage.java
pageObjects ---- MyAccountPage.java

2: Create LoginTest
testCases package ----- TC_002_LoginTest.java

3: Add entry testng.xml

Run and execute

step 13: Data Driven Test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1.Prepare test data in Excel, place the excel file inside the testData folder

Create one folder for data ----testData foldet ---- excel file(Opencart_LoginData.xlsx)


2.Create ExcelUtility class under utilities package

src/test/java ------- utilities pacakge ---inside(add ExcelUtility.java file)

3.Update Page Object class MyAccountPage , add logout link element)

4.Create DataProviders class in utilities package to maintain data providers for data driven tests.
src/test/java ------ utilities package --------DataProviders.java


5.Create LoginDataDrivenTest under testCases package.

testCases package ------TC_003_LoginDataDrivenTest.java

6.Add an Entry in testng.xml file


step 14: Grouping test cases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add all test cases into specific group.

		Sanity 
		        TC_002_Login ------ (groups= {"Sanity","Master"}) //Step8 groups added
		Regression
		        TC_001_AccountRegistration ---- (groups= {"Regression","Master"}) //Step8 groups added
		Master
		    TC_001_AccountRegistration
		    TC_002_Login
		    
		    
Also add BaseClass methods setup() & teardown() to all groups.

src/test/java ------- testNase package ------- BaseClass.java 
             @BeforeClass(groups = { "Master", "Sanity", "Regression" }) //Step8 groups added
             @AfterClass(groups = { "Master", "Sanity", "Regression" }) //Step8 groups added

Create separate TestNG xml file(grouping.xml) to run groups and include groups which we want to execute.

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="OpenCartSuite">
	
	 <listeners>
		<listener class-name="utilities.ExtentReportManager" />
	</listeners>
	
  <test thread-count="5" name="OpenCartTest">
	  <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
	  
	  <groups>
   		<run>
		<!-- 	<include name="Master" /> -->
			<include name="Sanity" />
		<!--	<include name="Regression" /> -->
		<!--	<exclude name="" /> -->
		</run>
	</groups>	
	
	
    <classes>
     <class name="testCases.TC_001_AccountRegistrationTest"/>
     <class name="testCases.TC_002_LoginTest"/>
      <!--   <class name="testCases.TC_003_LoginDataDrivenTest"/>-->
       
    </classes>
  </test> <!-- OpenCartTest -->
</suite> <!-- OpenCartSuite -->



Data drvien dataDriventests.xml file---one data driven test is there but future add more in this file

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="OpenCartSuite">
	
	 <listeners>
		<listener class-name="utilities.ExtentReportManager" />
	</listeners>
	
  <test thread-count="5" name="OpenCartTest">
	  <parameter name="browser" value="chrome" />    <!-- passing browser parameter to BaseClass ->Setup() -->
    <classes>
   
       <class name="testCases.TC_003_LoginDataDrivenTest"/>
       
    </classes>
  </test> <!-- OpenCartTest -->
</suite> <!-- OpenCartSuite -->

step 15 : Run with failure tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Only failed test cases -- see 
1.Run Failed Tests.
test-output  -------   testng-failed.xml




step 16 : Run with pom.xml test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Go to Pom.xml file (in plugins remove configuation tag)----- then save --- right click in pom.xml file
 ---- Run As ----- Maven test

BUILD SUCCESS  in POM.XML file




step 17 : Run with commandpropmt  test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Open the cmdprt ---- check mvn -version ----- project folder ---- right click ---properties ---- 
copy the path(C:\Users\win\eclipse-workspace\CucumberProject)  ----- cd copy the path -----then mvn test
step 16 :Setup maven.apache.org



step 18 : push the code in remote github
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Install git Local ------ git -v --------------------------- (cmd check)
Create Github account  ------------(username and pswd)


First go to this location ----C:\Users\win\eclipse-workspace\pavan_project
After Open the git bash ---- local system following below commands


                   1st round

1) git init  --- create an empty local repository 
2) git config --global user.name "your name"
   git config --global user.email "your email"
3) git add -A   --- add all the files and folders to staging area
 git add filename.txt
 git add *.java
 git add foldername
git status
4) git commit -m "commit msg"
5)  git remote add origin "github URL"
6) git push -u origin master


                  2nd round

1) git add -A
2) git commit -m "commit msg"
3) git push -u origin master

                 Change the reportory

git remote -v 
git remote set-url origin https://github.com/pradeepyalamasetti/Opencartselenium.git

How to get code from remote reportory
git pull   -- get files from github to workspace

clone - get entire project into your workspce
git clone "github repo url"  <folder> <br>
Git tutorials: https://youtube.com/playlist?list=PLUDwpEzHYYLuMNNTu0EdWBeBtXdRhj4Lv
how to delete complete reporsitory in github repository
how to delete file in github repository
how to add file in github repository





step  19 :Setup maven.apache.org
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://maven.apache.org/ ------- Downloads --------- zip file for windows ----- C:\software\apache-maven-3.9.4
This PC ------ properties properties ---- Advance system settings --- environment variables -----
MAVEN_HOME ----C:\software\apache-maven-3.9.4 ---- ok ------ path file ---- Edit ---- paste(%MAVEN_HOME%\bin)----ok
	
	
	
	
	
step 20 : jenkins using command prompt 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1.https://www.jenkins.io/download/  ---- download(Download Jenkins 2.414.2 LTS for:) --- after
2.create one folder ----- jars(C:\software\jars)---paste war file inside this. --- after
3.open command prompt
4.cd C:\software\jars
5.java -jar jenkins.war -- Press Enter
6.copy one time password (93d29acfa58e4ee7b54cac495e31fb2c)
7.http://localhost:8080/
8.install suggested plugins
9.install some more plugins ---maven integration.html publisher ,
10.system configured ----Tools ------ add JDK path name(JAVA_HOME) JAVA_HOME(C:\Program Files\Java\jdk-11)
	                       ----- add MAVEN path name(MAVEN_HOME) MAVEN_HOME(C:\software\apache-maven-3.9.4)
Apply and Save.



Run with Remote repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~
open the Jenkins --- New item ------- Project name given(CucumberProject_github )---- select Maven project 
------ok
---- select git --- paste github url(https://github.com/pradeepyalamasetti/Pav_selenium_opencart.git) 
---- go build given ---test ---- Apply and save ------Go to Dashborad --- open the project --- Build Now

Run with Local repository
~~~~~~~~~~~~~~~~~~~~~~~~~~
open the Jenkins --- New item ------- Project name given(CucumberProject_local )---- select Maven project 
------ok ---- ---- go build -----Root POM
--- paste the local path of pom xml (C:\Users\win\eclipse-workspace\pavan_project\pom.xml)
---test ---- Apply and save ------Go to Dashborad --- open the project --- Build Now





TC_004_SearchProductTest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HomePage.java
SearchPage.java
TC_004_SearchProductTest.java
testng.xml --- add testcase file name


TC_005_AddToCartPageTest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Everything is Done before TC_004_SearchProductTest must implement method in TC_005_AddToCartPageTest and Run
testng.xml --- add testcase file name

TC_006_EndToEndTest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TC_006_EndToEndTest.java
pageObjects ------- CheckoutPage.java
pageObjects ------- ShoppingCartPage.java
testng.xml  --- add testcase file name
